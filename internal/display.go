package game

import "fmt"

func DisplayHangman(h Hangman) {
	hangman := make(map[int]string)

	hangman[10] = ""
	hangman[9] = "\n\n\n\n\n\n\t========="
	hangman[8] = "\t        |\n\t        |\n\t\t    |\n\t        |\n\t        |\n\t========="
	hangman[7] = "\t\t+---+\n\t\t\t|\n\t\t\t|\n\t\t\t|\n\t\t\t|\n\t\t\t|\n\t========="
	hangman[6] = "\t\t+---+\n\t\t|   |\n\t\t\t|\n\t\t\t|\n\t\t\t|\n\t\t\t|\n\t========="
	hangman[5] = "\t\t+---+\n\t\t|   |\n\t\tO   |\n\t\t\t|\n\t\t\t|\n\t\t\t|\n\t========="
	hangman[4] = "\t\t+---+\n\t\t|   |\n\t\tO   |\n\t\t|   |\n\t\t\t|\n\t\t\t|\n\t========="
	hangman[3] = "\t\t+---+\n\t\t|   |\n\t\tO   |\n\t   /|   |\n\t\t\t|\n\t\t\t|\n\t========="
	hangman[2] = "\t\t+---+\n\t\t|   |\n\t\tO   |\n\t   /|\\  |\n\t\t\t|\n\t\t\t|\n\t========="
	hangman[1] = "\t\t+---+\n\t\t|   |\n\t\tO   |\n\t   /|\\  |\n\t   /    |\n\t\t\t|\n\t========="
	hangman[0] = "\t\t+---+\n\t\t|   |\n\t\tO   |\n\t   /|\\  |\n\t   / \\  |\n\t\t\t|\n\t========="
	fmt.Println(hangman[h.NbAttempts])
}

func DisplayAscii(h Hangman, letter rune) string {
	ascii := make(map[rune]string)

	ascii[97] = "    /\\     \n   /  \\    \n  / /\\ \\   \n / ____ \\  \n/_/    \\_\\"
	ascii[98] = " ____   \n|  _ \\  \n| |_) | \n|  _ <  \n| |_) | \n|____/  "
	ascii[99] = "  _____  \n / ____| \n| |      \n| |      \n| |____  \n \\_____| "
	ascii[100] = " _____   \n|  __ \\  \n| |  | | \n| |  | | \n| |__| | \n|_____/  "
	ascii[101] = " ______  \n|  ____| \n| |__    \n|  __|   \n| |____  \n|______| "
	ascii[102] = " ______  \n|  ____| \n| |__    \n|  __|   \n| |      \n|_|      "
	ascii[103] = "  _____  \n / ____| \n| |  __  \n| | |_ | \n| |__| | \n \\_____| "
	ascii[104] = " _    _  \n| |  | | \n| |__| | \n|  __  | \n| |  | | \n|_|  |_| "
	ascii[105] = " _____  \n|_   _| \n  | |   \n  | |   \n _| |_  \n|_____| "
	ascii[106] = "      _  \n     | | \n     | | \n _   | | \n| |__| | \n \\____/  "
	ascii[107] = " _  __ \n| |/ / \n| ' /  \n|  <   \n| . \\  \n|_|\\_\\ "
	ascii[108] = " _       \n| |      \n| |      \n| |      \n| |____  \n|______| "
	ascii[109] = " __  __  \n|  \\/  | \n| \\  / | \n| |\\/| | \n| |  | | \n|_|  |_| "
	ascii[110] = " _   _  \n| \\ | | \n|  \\| | \n| . ` | \n| |\\  | \n|_| \\_| "
	ascii[111] = "  ____   \n / __ \\  \n| |  | | \n| |  | | \n| |__| | \n \\____/  \n"
	ascii[112] = " _____   \n|  __ \\  \n| |__) | \n|  ___/  \n| |      \n|_|      "
	ascii[113] = "  ____   \n / __ \\  \n| |  | | \n| |  | | \n| |__| | \n \\___\\_\\ "
	ascii[114] = " _____   \n|  __ \\  \n| |__) | \n|  _  /  \n| | \\ \\  \n|_|  \\_\\ \n"
	ascii[115] = "  _____  \n / ____| \n| (___   \n \\___ \\  \n ____) | \n|_____/  "
	ascii[116] = " _______  \n|__   __| \n   | |    \n   | |    \n   | |    \n   |_|    "
	ascii[117] = " _    _  \n| |  | | \n| |  | | \n| |  | | \n| |__| | \n \\____/  "
	ascii[118] = "__      __ \n\\ \\    / / \n \\ \\  / /  \n  \\ \\/ /   \n   \\  /    \n    \\/     "
	ascii[119] = "__          __ \n\\ \\        / / \n \\ \\  /\\  / /  \n  \\ \\/  \\/ /   \n   \\  /\\  /    \n    \\/  \\/     "
	ascii[120] = "__   __ \n\\ \\ / / \n \\ V /  \n  > <   \n / . \\  \n/_/ \\_\\ \n"
	ascii[121] = "__     __ \n\\ \\   / / \n \\ \\_/ /  \n  \\   /   \n   | |    \n   |_|    "
	ascii[122] = " ______ \n|___  / \n   / /  \n  / /   \n / /__  \n/_____| "

	//return ascii[letter]
	if art, ok := asciiArt[letter]; ok {
		return art
	}
	return ""
}

var asciiArt = map[rune]string{
	'a': `
    /\     
   /  \    
  / /\ \   
 / ____ \  
/_/    \_\ 
`,
	'b': `
 ____   
|  _ \  
| |_) | 
|  _ <  
| |_) | 
|____/  
`,
	'c': `
  _____  
 / ____| 
| |      
| |      
| |____  
 \_____| 
`,
	'd': `
 _____   
|  __ \  
| |  | | 
| |  | | 
| |__| | 
|_____/  
`,
	'e': `
 ______  
|  ____| 
| |__    
|  __|   
| |____  
|______| 
`,
	'f': `
 ______  
|  ____| 
| |__    
|  __|   
| |      
|_|     
`,
	'g': `
  _____  
 / ____| 
| |  __  
| | |_ | 
| |__| | 
 \_____| 
`,
	'h': `
 _    _  
| |  | | 
| |__| | 
|  __  | 
| |  | | 
|_|  |_| 
`,
	'i': `
 _____  
|_   _| 
  | |   
  | |   
 _| |_  
|_____| 
`,
	'j': `
      _  
     | | 
     | | 
 _   | | 
| |__| | 
 \____/  
`,
	'k': `
 _  __ 
| |/ / 
| ' /  
|  <   
| . \  
|_|\_\ 
`,
	'l': `
 _       
| |      
| |      
| |      
| |____  
|______| 
`,
	'm': `
 __  __  
|  \/  | 
| \  / | 
| |\/| | 
| |  | | 
|_|  |_| 
`,
	'n': `
 _   _  
| \ | | 
|  \| | 
|     |
| |\  |
|_| \_|

	`,
	'o': `
  ____   
 / __ \  
| |  | | 
| |  | | 
| |__| | 
 \____/  
`,
	'p': `
 _____   
|  __ \  
| |__) | 
|  ___/  
| |      
|_|      
`,
	'q': `
  ____   
 / __ \  
| |  | | 
| |  | | 
| |__| | 
 \___\_\ 
`,
	'r': `
 _____   
|  __ \  
| |__) | 
|  _  /  
| | \ \  
|_|  \_\ 
`,
	's': `
  _____  
 / ____| 
| (___   
 \___ \  
 ____) | 
|_____/  
`,
	't': `
 _______  
|__   __| 
   | |    
   | |    
   | |    
   |_|    
`,
	'u': `
 _    _  
| |  | | 
| |  | | 
| |  | | 
| |__| | 
 \____/  
`,
	'v': `
__      __ 
\ \    / / 
 \ \  / /  
  \ \/ /   
   \  /    
    \/     
`,
	'w': `
__          __ 
\ \        / / 
 \ \  /\  / /  
  \ \/  \/ /   
   \  /\  /    
    \/  \/     
`,
	'x': `
__   __ 
\ \ / / 
 \ V /  
  > <   
 / . \  
/_/ \_\ 
`,
	'y': `
__     __ 
\ \   / / 
 \ \_/ /  
  \   /   
   | |    
   |_|    
`,
	'z': `
 ______ 
|___  / 
   / /  
  / /   
 / /__  
/_____| 
`,
	'_': `
 ______  
|______| 
`,
}
